package controllers;

import static play.libs.Json.toJson;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import javax.inject.Inject;
import javax.inject.Named;
import javax.inject.Singleton;

import models.Privilege;
import models.PrivilegeRepository;
import models.Role;
import models.RoleRepository;
import models.User;
import models.UserRepository;

import org.springframework.transaction.annotation.Transactional;

import play.mvc.Controller;
import play.mvc.Result;

/**
 * The main set of web services.
 */

@Named
@Singleton
public class Application extends Controller {

	private final PrivilegeRepository privilegeRepository;
	private final RoleRepository roleRepository;
	final UserRepository userRepository;

	// We are using constructor injection to receive a repository to support our
	// desire for immutability.
	@Inject
	public Application(final PrivilegeRepository privilegeRepository,
			final RoleRepository roleRepository,
			final UserRepository userRepository) {
		this.privilegeRepository = privilegeRepository;
		this.roleRepository = roleRepository;
		this.userRepository = userRepository;
	}

	static int count = 1;

	public Result index() {

		// For fun we save a new person and then find that one we've just saved.
		// The id is auto generated by
		// the db so we know that we're round-tripping to the db and back in
		// order to demonstrate something
		// interesting. Spring Data takes care of transactional concerns and the
		// following code is all
		// executed on the same thread (a requirement of the JPA entity
		// manager).

		String course = "Course" + count;
		final Privilege privilege = new Privilege("Course", "Bk is a Bitch");
		count++;

		final Privilege savedPrivilege = privilegeRepository.save(privilege);

		// Deliver the index page with a message showing the id that was
		// generated.

		return ok(views.html.index.render("We Added" + savedPrivilege.getName()));
	}

	public Result getPrivileges() {
		return ok(toJson(privilegeRepository.findAll()));

	}

	public Result getRoles() {
		return ok(toJson(roleRepository.findAll()));
	}

	public Result addRole() {
		final Map<String, String[]> requestParameters = request().body()
				.asFormUrlEncoded();
		if (requestParameters == null) {
			return ok("Reqeust Parameter is Null");
		}
		String name = requestParameters.get("name")[0];
		String description = requestParameters.get("description")[0];
		String[] privilegeList = requestParameters.get("privileges");
		List<Privilege> privileges = new ArrayList<>();
		for (String privilege : privilegeList) {
			privileges.add(privilegeRepository.findByName(privilege));
		}
		Role newRole = new Role();
		newRole.setName(name);
		newRole.setPrivilegeList(privileges);
		newRole.setDescription(description);
		roleRepository.save(newRole);
		return ok();
	}

	public Result getRole(String name) {
		if (name == null) {
			return ok("Reqeust Parameter is Null");
		}
		Role temp = roleRepository.findByName(name);
		if (temp == null) {
			return ok(name);
		}
		return ok(toJson(temp));
	}

	public Result getAllRoles() {
		return ok(toJson(roleRepository.findAll()));

	}

	public Result updateRole(String name) {
		final Map<String, String[]> requestParameters = request().body()
				.asFormUrlEncoded();
		Role role;
		if (requestParameters == null)
			return ok("Request Param is Null");
		String[] privileges = requestParameters.get("addPrivilege");
		String privilege = null;
		if (privileges != null)
			privilege = privileges[0];
		Privilege priv;
		if (privilege != null) {
			priv = privilegeRepository.findByName(privilege);
			role = roleRepository.findByName(name);
			role.getPrivileges().add(priv);
			roleRepository.save(role);
		} else {
			privilege = requestParameters.get("deletePrivilege")[0];
			priv = privilegeRepository.findByName(privilege);
			role = roleRepository.findByName(name);
			role.getPrivileges().remove(priv);
			roleRepository.save(role);
		}
		return ok(toJson(roleRepository.findAll()));
	}

	public Result deleteRole(String name) {
		Role role = roleRepository.findByName(name);
		roleRepository.delete(role.getId());
		return ok(toJson(roleRepository.findAll()));
	}

	@Transactional
	public Result addUser() {
		final Map<String, String[]> requestParameters = request().body()
				.asFormUrlEncoded();
		if (requestParameters == null) {
			return ok("Reqeust Parameter is Null");
		}
		
		String userName = requestParameters.get("userName")[0];
		String regType = requestParameters.get("regType")[0];
		String password = requestParameters.get("password")[0];
		String firstName = requestParameters.get("firstName")[0];
		String lastName = requestParameters.get("lastName")[0];
		
		User user = new User();
		user.id = (long) 1001;
		user.userName = userName;
		user.regType = regType;
		user.firstName = firstName;
		user.lastName = lastName;
		userRepository.save(user);
		
		return ok();
	}

	@Transactional
	public Result getUsers() {
		List<User> darn = userRepository.getAllUsersAndFetchRoles();
		return ok(toJson(darn));
	}

}
